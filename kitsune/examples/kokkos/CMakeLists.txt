#
# Copyright (c) 2020 Triad National Security, LLC
#                         All rights reserved.
#
# This file is part of the kitsune/llvm project.  It is released under
# the LLVM license.
#


# A small collection of Kokkos examples.
#
# NOTE: Internal builds of these examples are not geared for 
# benchmarking and performance comparisons for numerous reasons
# (e.g., kokkos is only configure in the serial mode within the 
# internal builds, compiler flags may not have all the desired 
# impacts in how they are set vs. LLVM's overall build settings, 
# etc.).
# 
project(KokkosExamples CXX)

set(_ld_library_path "")
set(_llvm_version "${LLVM_VERSION_MAJOR}.${LLVM_VERSION_MINOR}.${LLVM_VERSION_PATCH}")
message(DEBUG "LLVM version: ${_llvm_version}")

if (DEFINED ENV{LD_LIBRARY_PATH})
  set(_ld_library_path $ENV{LD_LIBRARY_PATH})
  string(PREPEND _ld_library_path ":")
endif()
string(PREPEND _ld_library_path 
       ${LLVM_BINARY_DIR}/lib/clang/${_llvm_version}/lib/${LLVM_DEFAULT_TARGET_TRIPLE})
set(ENV{LD_LIBRARY_PATH} ${_ld_library_path})
message(DEBUG "setting LD_LIBRARY_PATH: ${_ld_library_path}.")
unset(_ld_library_path)


set(_example_srcs
  complex.cpp
  matmult1.cpp
  normalize.cpp
#  raytrace.cpp
  vecadd.cpp
)

# Build the pure-kokkos serial target version of all the examples first.
# NOTE: Do not build kokkos with parallel "back-ends" as part of the 
# overall kitsune+tapir configure and build.  For performance comparisons 
# and other related work you should use a separate kokkos build. 
foreach(src_file IN ITEMS ${_example_srcs})
  get_filename_component(exec_name ${src_file} NAME_WLE)
  message(STATUS "  ${src_file} --> ${exec_name}")
  add_executable(${exec_name} ${src_file})
  target_include_directories(${exec_name} 
    BEFORE 
    PRIVATE 
    # ugh... uninstalled kokkos paths are a bit painful... 
    ${KITSUNE_INCLUDE_DIR}
    ${KITSUNE_KOKKOS_SRC_DIR}/core/src
    ${KITSUNE_KOKKOS_SRC_DIR}/containers/src)
  target_link_libraries(${exec_name} PRIVATE kokkoscore)
  set_target_properties(${exec_name} 
    PROPERTIES
    RUNTIME_OUTPUT_DIRECTORY  ${LLVM_BINARY_DIR}/examples/kitsune/kokkos)
  #
  install(TARGETS ${exec_name} 
          DESTINATION ${LLVM_BINARY_DIR}/kitsune/examples/kokkos)
endforeach()

# Build a version of the example for each runtime target that has 
# been enabled. We can get a list of all the support runtime targets
# in a format that is compatible for use with -ftapir=target. 
get_tapir_rt_targets(_tapir_rt_targets)
message(STATUS "  enabled runtime targets: ${_tapir_rt_targets}")
foreach(rt IN ITEMS ${_tapir_rt_targets})
  foreach(src_file IN ITEMS ${_example_srcs})
    get_filename_component(exec_name ${src_file} NAME_WLE)
    set(exec_name "${exec_name}.${rt}")
    message(STATUS "  ${src_file} --> ${exec_name}")
    add_executable(${exec_name} ${src_file})
    target_include_directories(${exec_name} 
      BEFORE 
      PRIVATE
      ${KITSUNE_INCLUDE_DIR}
      ${KITSUNE_KOKKOS_SRC_DIR}/core/src
      ${KITSUNE_KOKKOS_SRC_DIR}/containers/src)
    target_compile_options(${exec_name} 
      PRIVATE
      -v
      -fkokkos
      -fkokkos-no-init 
      -ftapir=${rt}
      --config ${LLVM_BINARY_DIR}/share/kitsune/${rt}.cfg)
    target_link_options(${exec_name} 
      PRIVATE 
      -ftapir=${rt}
      --config ${LLVM_BINARY_DIR}/share/kitsune/${rt}.cfg)
    target_link_libraries(${exec_name} PRIVATE kokkoscore opencilk opencilk-personality-cpp)
    set_target_properties(${exec_name}
      PROPERTIES
      RUNTIME_OUTPUT_DIRECTORY  ${LLVM_BINARY_DIR}/examples/kitsune/kokkos)
    #  
    install(TARGETS ${exec_name}
      DESTINATION ${LLVM_BINARY_DIR}/kitsune/examples/kokkos)
  endforeach()
endforeach()

# Do some clean up... 
unset(_example_srcs)
unset(_tapir_rt_targets)
